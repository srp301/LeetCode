Search in Rotated Sorted Array:
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

分析:
	二分法的变体，原来是有序数组，现在是经过了旋转之后的数组，但是这道题的难点在于我们不知道原数组在哪旋转了。
	我们还是用题目中给的例子来分析，对于数组[0 1 2 4 5 6 7] 共有下列七种旋转方法：

		0　　1　　2　　4　　5　　6　　7

		7　　0　　1　　2　　4　　5　　6

		6　　7　　0　　1　　2　　4　　5

		5　　6　　7　　0　　1　　2　　4

		4　　5　　6　　7　　0　　1　　2

		2　　4　　5　　6　　7　　0　　1

		1　　2　　4　　5　　6　　7　　0

	二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段，由上数据可知，第一次二分法之后当中间数小于右边边缘数之
	后，右边序列就是有序的，反之左边有序，我们只要在有序的半段序列里用首尾两个值来判断目标值是否在这一区域内，这样就可以确定保留
	哪半边序列了。
	详解请见：http://www.cnblogs.com/grandyang/p/4325648.html

Solution:
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
    if(nums.length===0) return -1;
    let lo = 0,
        hi = nums.length-1;
    let m;
    while(lo<=hi){
        m = parseInt((lo+hi)/2);
        if(nums[m]===target) return m;
        if(nums[m]<nums[hi]){
            if(target<=nums[hi]&&target>nums[m]){
                lo = m+1;
            }else{
                hi = m-1;
            }
        }else{
            if(target<nums[m]&&target>=nums[lo]){
                hi = m-1;
            }else{
                lo=m+1;
            }
        }
    }
    return -1;
};

详解请见：http://www.cnblogs.com/grandyang/p/4325648.html