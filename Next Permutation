Next Permutation:
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

Solution:
/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var nextPermutation = function(nums) {
    let index = nums.length-1;
    for(let i = nums.length-1;i>0;i--){
        if(nums[i]>nums[i-1]){
            break;
        }else{
            index--;
        }
    }
    if(index===0){
        nums = nums.reverse();
        return;
    }
    let m = nums[index-1];
    for(let i = nums.length-1;i>0;i--){
        if(m<nums[i]){
            swap(nums,index-1,i);
            break;
        }
    }
    let removeitem = nums.slice(index);
    nums.length = index;
    removeitem = removeitem.reverse();
    nums.splice(index,removeitem.length,...removeitem);
    return;
};

function swap(a,i,j){
    let x = a[i];
    a[i] = a[j];
    a[j] = x;
}

分析：
	原本41行用的是concat方法，但是不通过，因为concat方法返回的数组是新创建的，不符合题目中不能分配额外的内存这一项。



