Combination Sum:
Given a set of candidate numbers (C) (without duplicates) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

Solution:
/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum = function(candidates, target) {
    candidates.sort(function(a,b){
        if(a>b){
            return 1;
        }else if(a<b){
            return -1;
        }
    });
    let rtnall = [];
    let rtn = [];
    cs(rtn,candidates,target,0);
    function cs(rtn,candidates,target,start){
        if(target<0){
            return ;
        }else if(target===0){
            rtnall.push(rtn);
        }else{
            for(let j=start;j<candidates.length;j++){
                let rtn1 = rtn.concat();
                if(candidates[j]<=target){
                    rtn1.push(candidates[j]);
                    cs(rtn1,candidates,(target-candidates[j]),j);
                }
            }
        }
    }
    return rtnall;
};
