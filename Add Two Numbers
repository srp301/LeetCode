Add Two Numbers:
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int count = 0;
        ListNode ln = new ListNode(0);
        ListNode a = ln;
        while(l1!=null||l2!=null){
            count/=10;
            if(l1!=null){
                count+=l1.val;
                l1 = l1.next;
            }
            if(l2!=null){
                count+=l2.val;
                l2 = l2.next;
            }
            a.next = new ListNode(count%10);
            a = a.next;
        }
        if(count/10==1){
            a.next = new ListNode(1);
        }
        return ln.next;
    }
}