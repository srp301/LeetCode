4Sum:
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

Solution:
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[][]}
 */
var fourSum = function(nums, target) {
    let rtn = [];
    let lo , hi ;
    if(nums.length===4 && nums[0]+nums[1]+nums[2]+nums[3]===target){
        rtn.push([nums[0],nums[1],nums[2],nums[3]]);
        return rtn;
    }
    nums = nums.sort((a,b)=>{
        if(a<b) return -1;
        if(a>b) return 1;
    });
    for(let i = 0; i<nums.length-2;i++){
        while(nums[i]===nums[i-1]){
            i++;
        }
        for(let j = i+1;j<nums.length;j++){
            while(j!==i+1 && nums[j]===nums[j-1]){
                j++;
            }
            lo = j+1;
            hi = nums.length-1;
            while(lo<hi){
                if(nums[i]+nums[j]+nums[lo]+nums[hi]===target){
                    rtn.push([nums[i],nums[j],nums[lo],nums[hi]]);
                    lo++;
                    hi--;
                    while(nums[hi]===nums[hi+1]){
                        hi--;
                    }
                    while(nums[lo]===nums[lo-1]){
                        lo++;
                    }
                }else if(nums[i]+nums[j]+nums[lo]+nums[hi]>target){
                    hi--;
                }else if(nums[i]+nums[j]+nums[lo]+nums[hi]<target){
                    lo++;
                }
            }
        }
    }
    return rtn;
};