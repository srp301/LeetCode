Remove Duplicates from Sorted Array:
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.

分析：
	个人感觉本题还是有点坑，刚开始还以为只需要返回数组中不同元素的个数；实际上题目的意思是要我们：
	1、找出不同元素的个数rtn；
	2、在不用新数组的情况下修改原来的数组使之成为前rtn个元素为原数组的不同元素；
	类似于找一个子数组，所以不必担心数组长度溢出的问题；
	解法为双指针法：第一个指针遍历原数组，第二个指针指向数组中不同元素下一个位置。

Solution:
/**
 * @param {number[]} nums
 * @return {number}
 */
var removeDuplicates = function(nums) {
    if(nums.length===1) return 1;
    let middle = nums[0];
    let rtn = 1;
    for(let i = 1;i<nums.length;i++){
        if(nums[i]!==middle){
            nums[rtn] = nums[i];
            middle = nums[i];
            rtn++;
        }
    }
    return rtn;
};