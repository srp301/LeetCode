Spiral Matrix:
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

分析：
对于每一层（记为层i），以(i,i)位置出发，向右到达(i,n-1-i)，向下到达(m-1-i,n-1-i)，向左到达(m-1-i,i)，再向上回到起点。

所有层次遍历完成后，即得到所求数组

注意：i==m-1-i 或者 i==n-1-i时，不要来回重复遍历。

Solution:
/**
 * @param {number[][]} matrix
 * @return {number[]}
 */
var spiralOrder = function(matrix) {
    if(!matrix[0] || !matrix[0][0]){
        return [];
    }
    var m = matrix.length;
    var n = matrix[0].length;
    var rtnall = [];
    for(let i = 0;i<parseInt((Math.min(m,n)+1)/2);i++){
        for(let a = i;a<n-i;a++){
            rtnall.push(matrix[i][a]);
        }
        for(let b = i+1;b<m-i;b++){
            rtnall.push(matrix[b][n-i-1]);
        }
        if(m-i-1>i){
            for(let c = n-1-i-1;c>=i;c--){
                rtnall.push(matrix[m-1-i][c]);
            }
        }
        if(n-i-1>i){
            for(let d = m-1-i-1;d>i;d--){
                rtnall.push(matrix[d][i]);
            }
        }
    }
    return rtnall;
};